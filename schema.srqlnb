[{"kind":2,"language":"surrealql","value":"-- Step 1: Create the organizations table.\nCREATE TABLE organizations;\n\nCREATE TABLE roles;\n\nCREATE TABLE users;\nDEFINE INDEX idx_username ON users COLUMNS username UNIQUE;\nDEFINE FIELD email ON users TYPE string ASSERT is::email AND $value != NONE;\n\nCREATE TABLE user_organizations;\nDEFINE INDEX idx_user_org ON user_organizations COLUMNS user_id, organization_id UNIQUE;\n\nCREATE TABLE permissions;\n\nCREATE TABLE role_permissions;\nDEFINE INDEX idx_role_perm ON role_permissions COLUMNS role_id, permission_id UNIQUE;\n\nCREATE TABLE posts;\nDEFINE INDEX idx_user_id ON posts COLUMNS user_id;\nDEFINE INDEX idx_org_id ON posts COLUMNS organization_id;\n\nCREATE TABLE notes;\nDEFINE INDEX idx_user_id ON notes COLUMNS user_id;\n\nCREATE TABLE comments;\nDEFINE FIELD deleted_at ON comments TYPE datetime;\nDEFINE INDEX idx_user_id ON comments COLUMNS user_id;\nDEFINE INDEX idx_post_id ON comments COLUMNS post_id;\nDEFINE INDEX idx_note_id ON comments COLUMNS note_id;\nDEFINE FIELD post_id ON comments TYPE record(posts) ASSERT $value != NONE OR $self.note_id != NONE;\nDEFINE FIELD note_id ON comments TYPE record(notes) ASSERT $value != NONE OR $self.post_id != NONE;\n\nRELATE users -> roles;\nRELATE users -> user_organizations -> organizations;\nRELATE roles -> role_permissions -> permissions;\nRELATE users -> posts;\nRELATE organizations -> posts;\nRELATE users -> notes;\nRELATE users -> comments;\nRELATE posts -> comments;\nRELATE notes -> comments;"},{"kind":2,"language":"surrealql","value":"DEFINE NAMESPACE IF NOT EXISTS foodit;\nDEFINE DATABASE IF NOT EXISTS database_foodit;\n\nUSE NS foodit DB database_foodit;\n\n\n-- Enable scope authentication directly in SurrealDB\nDEFINE SCOPE IF NOT EXISTS account SESSION 24h\n\tSIGNUP ( CREATE user SET providerId = crypto::argon2::generate($providerId) )\n\tSIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(providerId, $providerId) )\n;\n\nDEFINE TOKEN auth0 ON SCOPE user TYPE JWKS VALUE \"https://<YOUR_AUTH0_DOMAIN>/.well-known/jwks.json\";\n\nDEFINE TABLE user SCHEMAFULL\n  -- Authorized users can select, update, delete and create user records.\n  -- Records that do not match the permissions will not be modified nor returned.\n  PERMISSIONS FOR select, update, delete, create\n  WHERE\n    -- The token scope must match the scope that we defined.\n    -- The name of the scope should match the scope that we defined before.\n    $scope = \"user\"\n    -- The audience claim must contain the audience of you application.\n    -- This is the value that you defined when creating the API in Auth0.\n    AND $token.aud CONTAINS \"<YOUR_AUTH0_AUDIENCE_VALUE>\"\n    -- The audience claim must contain your Auth0 user information endpoint.\n    -- It contains the domain generated when when creating the application in Auth0.\n    AND $token.aud CONTAINS \"https://<YOUR_AUTH0_DOMAIN>/userinfo\"\n    -- The email claim must match the email of the user being queried.\n    AND email = $token.email\n    -- The email must be verified as belonging to the user.\n    AND $token.email_verified = true\n;\n\n-- In this example, we will use the email as the primary identifier for a user.\nDEFINE INDEX providerId ON user FIELDS email UNIQUE;\nDEFINE FIELD providerId ON user TYPE string ASSERT string::is::email($value);\n-- We define some other information present in the token that we want to store.\nDEFINE FIELD name ON user TYPE string;\nDEFINE FIELD email ON user TYPE string ASSERT string::is::email($value) ;\nDEFINE FIELD display_name ON user TYPE string;\nDEFINE FIELD picture ON user TYPE string;"},{"kind":2,"language":"surrealql","value":""}]