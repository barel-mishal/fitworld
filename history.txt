#V2
CREATE nutri SET name = protein;
SELECT * FROM nutri;
CREATE nutri SET name = 'protein';
SELECT * FROM nutri;
delete nutri:utswgd677fd8fckmk7c8
SELECT * FROM nutri;
DEFINE NAMESPACE IF NOT EXISTS namespace;
DEFINE DATABASE IF NOT EXISTS database;
  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n  USE NS namespace DB database;\n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass) )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER barel ON ROOT PASSWORD '123456' ROLES OWNER;
  USE NS namespace DB database;\n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass) )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER barel ON ROOT PASSWORD '123456' ROLES OWNER;
DEFINE USER barel ON ROOT PASSWORD '123456' ROLES OWNER;
  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n
  DEFINE TOKEN barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8"\n
info for db;
  DEFINE TABLE user SCHEMAFULL;\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;
DELETE user:zfqofw5fe2psijqaaxtm;
select * from user;
select roles from user;
DELETE user where roles = NONE;
select roles from user;
  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;
  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;
USE NS namespace DB database;
  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass) )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );
DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;
  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n
  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR create\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;
  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass) )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );
DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass) )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR create\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;
REMOVE TABLE user;
  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;
 DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;
select * from user;
\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;
select * from user;
  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;
  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;
  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string;\n  DEFINE FIELD name ON TABLE profile TYPE string;\n  DEFINE FIELD image ON TABLE profile TYPE string;\n  DEFINE FIELD createdAt ON profile VALUE time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;
  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN (CREATE profile);\n
info for db;
info for ns;
 DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;
info for db;
  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN (CREATE profile);
  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string;\n  DEFINE FIELD name ON TABLE profile TYPE string;\n  DEFINE FIELD image ON TABLE profile TYPE string;\n  DEFINE FIELD createdAt ON profile VALUE time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;
  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;
select * from user;
  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n\n  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN (CREATE profile);
select * from user;
\n  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n\n  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN (CREATE profile);
info for db;
create profile;
DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;
select * from user;
select * from profile;
  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN (CREATE profile);\n
\n  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n\n  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN (CREATE profile);
DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN ( CREATE profile SET userId = $auth.id );
  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;
\n  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n\n  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN ( CREATE profile SET userId = $auth.id );
\n  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n\n  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN ( CREATE profile SET userId = $after.id );
DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP ( CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n\n  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN (\n    CREATE profile SET userId = $after.id\n  );
\n  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP (\n      CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId\n      RETURN *\n    )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n\n  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN (\n    CREATE profile SET userId = $after.id\n  );
 DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP (\n      CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId\n      RETURN *\n    )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;
\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n
  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN (\n    CREATE profile SET userId = $after.id\n  );
DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP (\n      CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId\n      RETURN *\n    )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n\n\n\n  DEFINE EVENT createdUser ON TABLE user WHEN $event = "CREATE" THEN (\n    CREATE profile SET userId = $after.id\n  );\n
\n  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP (\n      CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId\n      RETURN *\n    )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;
select * from profile;
select * from user;
\n  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP (\n      CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId\n      RETURN *\n    )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD nickname ON TABLE personalInfo TYPE string VALUE $value OR "" DEFAULT meta::id($auth.id);\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;
\n  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP (\n      CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId\n      RETURN *\n    )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD nickname ON TABLE personalInfo TYPE string VALUE $value OR "" DEFAULT meta::id($auth.id);\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n\n  DEFINE TABLE personalInfo SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE personalInfo TYPE record VALUE $auth.id;\n  DEFINE FIELD dateOfBirth ON TABLE personalInfo TYPE string;\n  DEFINE FIELD goals ON TABLE personalInfo TYPE array<string>;\n  DEFINE FIELD goals.* ON TABLE personalInfo TYPE string;\n  DEFINE FIELD about ON TABLE personalInfo TYPE option<string>;\n  DEFINE FIELD createdAt ON personalInfo VALUE time::now() READONLY;\n  DEFINE FIELD updateAt ON personalInfo VALUE time::now() READONLY;\n  DEFINE INDEX personalInfoUserId ON TABLE personalInfo COLUMNS userId UNIQUE;\n  DEFINE INDEX nickname ON TABLE personalInfo COLUMNS nickname UNIQUE;
select * from profile
select * from user;
\n  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP (\n      CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId\n      RETURN *\n    )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD nickname ON TABLE profile TYPE string DEFAULT meta::id($auth.id);\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n\n  DEFINE TABLE personalInfo SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE personalInfo TYPE record VALUE $auth.id;\n  DEFINE FIELD dateOfBirth ON TABLE personalInfo TYPE string;\n  DEFINE FIELD goals ON TABLE personalInfo TYPE array<string>;\n  DEFINE FIELD goals.* ON TABLE personalInfo TYPE string;\n  DEFINE FIELD about ON TABLE personalInfo TYPE option<string>;\n  DEFINE FIELD createdAt ON personalInfo VALUE time::now() READONLY;\n  DEFINE FIELD updateAt ON personalInfo VALUE time::now() READONLY;\n  DEFINE INDEX personalInfoUserId ON TABLE personalInfo COLUMNS userId UNIQUE;\n  DEFINE INDEX nickname ON TABLE personalInfo COLUMNS nickname UNIQUE;
select * from profile;
select * from user;
UPDATE profile MERGE { name: "Barel" }
UPDATE profile:x9m6sr7bz6rlx5h3uyuh MERGE { name: "Barel" }
select * from user;
\n  DEFINE TABLE weights SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE weights TYPE record VALUE $auth.id;\n  DEFINE FIELD weight ON TABLE weights TYPE number;\n  DEFINE FIELD createdAt ON weights TYPE datetime VALUE $value OR time::now();\n  DEFINE FIELD updateAt ON weights TYPE datetime VALUE $value OR time::now();\n  DEFINE INDEX weightsUserId ON TABLE weights COLUMNS userId UNIQUE;\n  DEFINE INDEX weightsCreatedAt ON TABLE weights COLUMNS createdAt;\n\n  DEFINE TABLE heights SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE heights TYPE record VALUE $auth.id;\n  DEFINE FIELD height ON TABLE heights TYPE number;\n  DEFINE FIELD createdAt ON heights TYPE datetime VALUE $value OR time::now();\n  DEFINE FIELD updateAt ON heights TYPE datetime VALUE $value OR time::now();\n  DEFINE INDEX heightsUserId ON TABLE heights COLUMNS userId UNIQUE;\n  DEFINE INDEX heightsCreatedAt ON TABLE heights COLUMNS createdAt;
select * from profile;
\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD nickname ON TABLE profile TYPE string DEFAULT meta::id($auth.id);\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n  DEFINE FIELD dateOfBirth ON TABLE profile TYPE string;\n  DEFINE FIELD goals ON TABLE profile TYPE array<string>;\n  DEFINE FIELD goals.* ON TABLE profile TYPE string;\n  DEFINE FIELD about ON TABLE profile TYPE option<string>;\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE INDEX nickname ON TABLE profile COLUMNS nickname UNIQUE;\n\n  DEFINE TABLE weights SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE weights TYPE record VALUE $auth.id;\n  DEFINE FIELD weight ON TABLE weights TYPE number;\n  DEFINE FIELD createdAt ON weights TYPE datetime VALUE $value OR time::now();\n  DEFINE FIELD updateAt ON weights TYPE datetime VALUE $value OR time::now();\n  DEFINE INDEX weightsUserId ON TABLE weights COLUMNS userId UNIQUE;\n  DEFINE INDEX weightsCreatedAt ON TABLE weights COLUMNS createdAt;\n\n  DEFINE TABLE heights SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE heights TYPE record VALUE $auth.id;\n  DEFINE FIELD height ON TABLE heights TYPE number;\n  DEFINE FIELD createdAt ON heights TYPE datetime VALUE $value OR time::now();\n  DEFINE FIELD updateAt ON heights TYPE datetime VALUE $value OR time::now();\n  DEFINE INDEX heightsUserId ON TABLE heights COLUMNS userId UNIQUE;\n  DEFINE INDEX heightsCreatedAt ON TABLE heights COLUMNS createdAt;\n\n
select * from profile;
info for db;
select * from profile;
 DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP (\n      CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId\n      RETURN *\n    )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD nickname ON TABLE profile TYPE string DEFAULT meta::id($auth.id);\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD dateOfBirth ON TABLE profile TYPE option<datetime> DEFAULT NONE;\n  DEFINE FIELD goals ON TABLE profile TYPE array<string> DEFAULT ["", "", ""];\n  DEFINE FIELD goals.* ON TABLE profile TYPE string DEFAULT "";\n  DEFINE FIELD about ON TABLE profile TYPE option<string> DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n  DEFINE INDEX nickname ON TABLE profile COLUMNS nickname UNIQUE;\n\n  DEFINE TABLE weight SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE weight TYPE record VALUE $auth.id;\n  DEFINE FIELD weight ON TABLE weight TYPE number;\n  DEFINE FIELD createdAt ON weight TYPE datetime VALUE $value OR time::now();\n  DEFINE FIELD updateAt ON weight TYPE datetime VALUE $value OR time::now();\n  DEFINE INDEX weightUserId ON TABLE weight COLUMNS userId UNIQUE;\n  DEFINE INDEX weightCreatedAt ON TABLE weight COLUMNS createdAt;\n\n  DEFINE TABLE height SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE height TYPE record VALUE $auth.id;\n  DEFINE FIELD height ON TABLE height TYPE number;\n  DEFINE FIELD createdAt ON height TYPE datetime VALUE $value OR time::now();\n  DEFINE FIELD updateAt ON height TYPE datetime VALUE $value OR time::now();\n  DEFINE INDEX heightUserId ON TABLE height COLUMNS userId UNIQUE;\n  DEFINE INDEX heightCreatedAt ON TABLE height COLUMNS createdAt;
select * from profile;
\n  DEFINE NAMESPACE IF NOT EXISTS namespace;\n  DEFINE DATABASE IF NOT EXISTS database;\n\n  USE NS namespace DB database;\n  \n  DEFINE SCOPE IF NOT EXISTS account SESSION 1w\n    SIGNUP (\n      CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId\n      RETURN *\n    )\n    SIGNIN ( SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass) );\n  \n  DEFINE USER IF NOT EXISTS barel ON ROOT PASSWORD '123456' ROLES OWNER;\n    \n  -- Set the name of the token\n  -- Use this token provider for database authorization\n  -- Specify the cryptographic signature algorithm used to verify the token\n  -- Specify the secret used to sign and verify the authenticity of the token\n  DEFINE TOKEN IF NOT EXISTS barel ON DATABASE TYPE HS512 VALUE "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";\n\n  DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE id = $auth.id\n      FOR update\n        WHERE id = $auth.id\n      FOR delete\n        WHERE id = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD pass ON TABLE user TYPE string;\n  DEFINE FIELD roles ON TABLE user TYPE array<string> DEFAULT ["user"];\n  DEFINE FIELD roles.* ON TABLE user TYPE string;\n  DEFINE FIELD providerId ON TABLE user TYPE string;\n  DEFINE FIELD createdAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE FIELD updateAt ON user VALUE time::now() DEFAULT time::now() READONLY;\n  DEFINE INDEX userProviderId ON TABLE user COLUMNS providerId UNIQUE;\n\n  DEFINE TABLE profile SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR create\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE profile TYPE record VALUE $auth.id DEFAULT $auth.id;\n  DEFINE FIELD email ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD name ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD nickname ON TABLE profile TYPE string DEFAULT meta::id($auth.id);\n  DEFINE FIELD image ON TABLE profile TYPE string VALUE $value OR "" DEFAULT "";\n  DEFINE FIELD dateOfBirth ON TABLE profile TYPE option<datetime> DEFAULT NONE;\n  DEFINE FIELD goals ON TABLE profile TYPE array<string> DEFAULT ["", "", ""];\n  DEFINE FIELD goals.* ON TABLE profile TYPE string DEFAULT "";\n  DEFINE FIELD about ON TABLE profile TYPE option<string> DEFAULT "";\n  DEFINE FIELD createdAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE FIELD updateAt ON profile VALUE time::now() DEFAULT time::now();\n  DEFINE INDEX profileUserId ON TABLE profile COLUMNS userId UNIQUE;\n  DEFINE INDEX nickname ON TABLE profile COLUMNS nickname UNIQUE;\n\n  DEFINE TABLE weight SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE weight TYPE record VALUE $auth.id;\n  DEFINE FIELD weight ON TABLE weight TYPE number;\n  DEFINE FIELD createdAt ON weight TYPE datetime VALUE $value OR time::now();\n  DEFINE FIELD updateAt ON weight TYPE datetime VALUE $value OR time::now();\n  DEFINE INDEX weightUserId ON TABLE weight COLUMNS userId UNIQUE;\n  DEFINE INDEX weightCreatedAt ON TABLE weight COLUMNS createdAt;\n\n  DEFINE TABLE height SCHEMAFULL\n    PERMISSIONS\n      FOR select\n        WHERE userId = $auth.id\n      FOR update\n        WHERE userId = $auth.id\n      FOR delete\n        WHERE userId = $auth.id OR $auth.role = "admin";\n  DEFINE FIELD userId ON TABLE height TYPE record VALUE $auth.id;\n  DEFINE FIELD height ON TABLE height TYPE number;\n  DEFINE FIELD createdAt ON height TYPE datetime VALUE $value OR time::now();\n  DEFINE FIELD updateAt ON height TYPE datetime VALUE $value OR time::now();\n  DEFINE INDEX heightUserId ON TABLE height COLUMNS userId UNIQUE;\n  DEFINE INDEX heightCreatedAt ON TABLE height COLUMNS createdAt;\n
