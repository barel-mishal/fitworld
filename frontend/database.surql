
-- ------------------------------
-- -- Export generated by Surrealist on 2024-06-16T10:31:20.266Z
-- ------------------------------


-- ------------------------------
-- OPTION
-- ------------------------------

OPTION IMPORT;

-- ------------------------------
-- FUNCTIONS
-- ------------------------------

DEFINE FUNCTION fn::energy($me: record<profile>) {
LET $profile = (SELECT gender, activity_level, dateOfBirth, latest_height_cm, latest_weight_kg FROM $me)[0];
LET $isFilling = (!$profile.dateOfBirth OR !$profile.latest_height_cm OR !$profile.latest_weight_kg OR !$profile.activity_level);
LET $result = (IF $isFilling THEN { RETURN { missing: { activity_level: $profile.activity_level, birth: $profile.dateOfBirth, latest_height_cm: $profile.latest_height_cm, latest_weight_kg: $profile.latest_weight_kg }, success: false }; } ELSE ({
LET $age = duration::years(time::now() - $profile.dateOfBirth);
LET $height_m = $profile.latest_height_cm / 100;
LET $BMI = ($profile.latest_weight_kg / ($height_m * $height_m));
LET $ideal_weight_kg = ({ message: 'Should Add logic based on age and bmi. it may be good to account for low and heigh values also.', value: (25 * ($height_m * $height_m)) });
LET $normalize_weight_kg = (($profile.latest_weight_kg - $ideal_weight_kg.value) * 0.25f) + $ideal_weight_kg.value;
LET $activity_level_number = (SELECT VALUE (IF activity_level = 'Sedentary' THEN (1.2f) ELSE IF activity_level = 'Lightly active' THEN (1.375f) ELSE IF activity_level = 'Moderately active' THEN (1.55f) ELSE IF activity_level = 'Very active' THEN (1.725f) ELSE IF activity_level = 'Extra active' THEN (1.9f) END) FROM $profile)[0];
LET $gender = $profile.gender;
LET $weight_component = $profile.latest_weight_kg * 10f;
LET $height_component = 6.25f * $profile.latest_height_cm;
LET $age_component = 5f * $age;
LET $constant = (IF $gender = 'male' THEN 5f ELSE -161f END);
LET $intermediate_sum = $weight_component + $height_component - $age_component;
LET $sum_before_activity_level = $intermediate_sum + $constant;
LET $TEE = $sum_before_activity_level * $activity_level_number;
LET $ENERGY_DRI = (IF ($age >= 65) THEN ({ heigh: 25 * $profile.latest_weight_kg, low: 30 * $profile.latest_weight_kg }) ELSE IF (18 <= $age < 65) THEN ({ heigh: 35 * $profile.latest_weight_kg, low: 30 * $profile.latest_weight_kg }) ELSE ({ heigh: NONE, low: NONE }) END);
RETURN { TEE: $TEE, TEE_RDA: $ENERGY_DRI, addeded_exerience: 10, bmi: $BMI, constant: $constant, ideal_weight: $ideal_weight_kg, lastSteps: fn::game_level($me.userId), normaliz_weight: $normalize_weight_kg, userId: $me.userId };
}) END);
RETURN $result;
} PERMISSIONS FULL;
DEFINE FUNCTION fn::game_level($me: record<user>) {
LET $steps = (SELECT level, unit, section, id FROM step WHERE userId = $me ORDER BY section, unit LIMIT 3);
RETURN { addeded_exerience: 10, steps: $steps };
} PERMISSIONS FULL;
DEFINE FUNCTION fn::overview($me: record<profile>) {
LET $nutri_status = fn::energy($me);
LET $last_steps = fn::game_level($me.userId);
RETURN { last_steps: $last_steps, nutritional_status: $nutri_status, userId: $me.id };
} PERMISSIONS FULL;

-- ------------------------------
-- SCOPES
-- ------------------------------

DEFINE SCOPE account SESSION 1w SIGNUP (CREATE user SET pass = crypto::argon2::generate($pass), providerId = $providerId, createdAt = time::now(), updatedAt = time::now(), email = $email RETURN *) SIGNIN (SELECT * FROM user WHERE crypto::argon2::compare(pass, $pass));

-- ------------------------------
-- TABLE: Eat
-- ------------------------------

DEFINE TABLE Eat TYPE ANY SCHEMAFULL PERMISSIONS FOR select, create, update WHERE userId = $auth.id, FOR delete WHERE userId = $auth.id OR $auth.role = 'admin';

DEFINE FIELD amount ON Eat TYPE float DEFAULT 0f PERMISSIONS FULL;
DEFINE FIELD commited ON Eat TYPE option<datetime> DEFAULT NONE VALUE $value PERMISSIONS FULL;
DEFINE FIELD createdAt ON Eat TYPE datetime DEFAULT time::now() PERMISSIONS FULL;
DEFINE FIELD eatedAt ON Eat TYPE datetime DEFAULT time::now() VALUE $value PERMISSIONS FULL;
DEFINE FIELD food ON Eat TYPE record<Ingredient> PERMISSIONS FULL;
DEFINE FIELD measurement ON Eat TYPE record<ingredient_measurements> PERMISSIONS FULL;
DEFINE FIELD updatedAt ON Eat TYPE datetime DEFAULT time::now() VALUE $value PERMISSIONS FULL;
DEFINE FIELD userId ON Eat TYPE record<user> DEFAULT $auth.id VALUE $auth.id PERMISSIONS FULL;

-- ------------------------------
-- TABLE: Food_Group
-- ------------------------------

DEFINE TABLE Food_Group TYPE ANY SCHEMAFULL PERMISSIONS NONE;

DEFINE FIELD calories ON Food_Group TYPE float PERMISSIONS FULL;
DEFINE FIELD carbs ON Food_Group TYPE float PERMISSIONS FULL;
DEFINE FIELD fats ON Food_Group TYPE float PERMISSIONS FULL;
DEFINE FIELD group_hebrew_name ON Food_Group TYPE string PERMISSIONS FULL;
DEFINE FIELD group_name ON Food_Group TYPE string PERMISSIONS FULL;
DEFINE FIELD id ON Food_Group TYPE record<Food_Group> PERMISSIONS FULL;
DEFINE FIELD info ON Food_Group TYPE array<string> PERMISSIONS FULL;
DEFINE FIELD info[*] ON Food_Group TYPE string PERMISSIONS FULL;
DEFINE FIELD protein ON Food_Group TYPE float PERMISSIONS FULL;

-- ------------------------------
-- TABLE: Ingredient
-- ------------------------------

DEFINE TABLE Ingredient TYPE ANY SCHEMAFULL PERMISSIONS NONE;

DEFINE FIELD addCarbs ON Ingredient TYPE float PERMISSIONS FULL;
DEFINE FIELD addFat ON Ingredient TYPE float PERMISSIONS FULL;
DEFINE FIELD addProtein ON Ingredient TYPE float DEFAULT 0f PERMISSIONS FULL;
DEFINE FIELD amount ON Ingredient TYPE float DEFAULT 0f PERMISSIONS FULL;
DEFINE FIELD foodGroupNumber ON Ingredient TYPE array<number> PERMISSIONS FULL;
DEFINE FIELD foodGroupNumber[*] ON Ingredient TYPE number PERMISSIONS FULL;
DEFINE FIELD group ON Ingredient TYPE record<Food_Group> PERMISSIONS FULL;
DEFINE FIELD hebrew_name ON Ingredient TYPE string PERMISSIONS FULL;
DEFINE FIELD id ON Ingredient TYPE record<Ingredient> PERMISSIONS FULL;
DEFINE FIELD name ON Ingredient TYPE string PERMISSIONS FULL;
DEFINE FIELD selectedMeasurement ON Ingredient TYPE record<Measurements> PERMISSIONS FULL;
DEFINE FIELD serving ON Ingredient TYPE float PERMISSIONS FULL;
DEFINE FIELD servingUnit ON Ingredient TYPE string PERMISSIONS FULL;

DEFINE INDEX hebrew_name_unique ON Ingredient FIELDS hebrew_name UNIQUE;
DEFINE INDEX name_unique ON Ingredient FIELDS name UNIQUE;

-- ------------------------------
-- TABLE: Measurements
-- ------------------------------

DEFINE TABLE Measurements TYPE ANY SCHEMAFULL PERMISSIONS NONE;

DEFINE FIELD hebrew_name ON Measurements TYPE string PERMISSIONS FULL;
DEFINE FIELD id ON Measurements TYPE record<Measurements> PERMISSIONS FULL;
DEFINE FIELD name ON Measurements TYPE string PERMISSIONS FULL;

-- ------------------------------
-- TABLE: asset
-- ------------------------------

DEFINE TABLE asset TYPE ANY SCHEMAFULL PERMISSIONS FOR select, update WHERE userId = $auth.id, FOR create NONE, FOR delete WHERE userId = $auth.id OR $auth.role = 'admin';

DEFINE FIELD asset_id ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD asset_name ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD bytes ON asset TYPE int PERMISSIONS FULL;
DEFINE FIELD created_at ON asset TYPE datetime PERMISSIONS FULL;
DEFINE FIELD etag ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD existing ON asset TYPE bool PERMISSIONS FULL;
DEFINE FIELD folder ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD format ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD height ON asset TYPE int PERMISSIONS FULL;
DEFINE FIELD original_filename ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD placeholder ON asset TYPE bool PERMISSIONS FULL;
DEFINE FIELD public_id ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD resource_type ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD secure_url ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD signature ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD tags ON asset TYPE array PERMISSIONS FULL;
DEFINE FIELD tags[*] ON asset TYPE any PERMISSIONS FULL;
DEFINE FIELD type ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD url ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD userId ON asset TYPE record<user> DEFAULT $auth.id VALUE $auth.id PERMISSIONS FULL;
DEFINE FIELD version ON asset TYPE int PERMISSIONS FULL;
DEFINE FIELD version_id ON asset TYPE string PERMISSIONS FULL;
DEFINE FIELD width ON asset TYPE int PERMISSIONS FULL;

DEFINE INDEX asset_id_index ON asset FIELDS asset_id UNIQUE;

-- ------------------------------
-- TABLE: height
-- ------------------------------

DEFINE TABLE height TYPE ANY SCHEMAFULL PERMISSIONS FOR select, create, update WHERE userId = $auth.id, FOR delete WHERE userId = $auth.id OR $auth.role = 'admin';

DEFINE FIELD createdAt ON height TYPE datetime DEFAULT time::now() VALUE $value OR time::now() PERMISSIONS FULL;
DEFINE FIELD day ON height VALUE time::format(updateAt OR time::now(), '%Y-%m-%d') PERMISSIONS FULL;
DEFINE FIELD type ON height TYPE string DEFAULT 'cm' VALUE $value ASSERT $value INSIDE ['m', 'cm', 'FT'] PERMISSIONS FULL;
DEFINE FIELD updateAt ON height TYPE datetime DEFAULT time::now() VALUE $value OR time::now() PERMISSIONS FULL;
DEFINE FIELD userId ON height TYPE record<user> DEFAULT $auth.id VALUE $auth.id PERMISSIONS FULL;
DEFINE FIELD value ON height TYPE number DEFAULT 0 VALUE $value PERMISSIONS FULL;

DEFINE INDEX day_unique ON height FIELDS day UNIQUE;
DEFINE INDEX weightUserId ON height FIELDS userId;

DEFINE EVENT new_latest_height ON height WHEN $event = 'CREATE' OR $event = 'UPDATE' THEN {
LET $height_cm = (IF $after.type = 'm' THEN ($after.value * 100) ELSE IF ($after.type = 'cm') THEN ($after.value) ELSE ($after.value * 2.54f) END);
UPDATE profile SET latest_height_cm = $height_cm WHERE userId = $after.userId;
};

-- ------------------------------
-- TABLE: ingredient_measurements
-- ------------------------------

DEFINE TABLE ingredient_measurements TYPE ANY SCHEMAFULL PERMISSIONS NONE;

DEFINE FIELD hebrew_unit ON ingredient_measurements TYPE string DEFAULT '' PERMISSIONS FULL;
DEFINE FIELD in ON ingredient_measurements TYPE record<Ingredient> PERMISSIONS FULL;
DEFINE FIELD out ON ingredient_measurements TYPE record<Measurements> PERMISSIONS FULL;
DEFINE FIELD unit ON ingredient_measurements TYPE string DEFAULT '' PERMISSIONS FULL;
DEFINE FIELD weight ON ingredient_measurements TYPE float DEFAULT -1f PERMISSIONS FULL;

-- ------------------------------
-- TABLE: profile
-- ------------------------------

DEFINE TABLE profile TYPE ANY SCHEMAFULL PERMISSIONS FOR select, update WHERE userId = $auth.id OR $auth.role = 'admin' OR $before.id, FOR create WHERE $scope = 'account', FOR delete WHERE userId = $auth.id OR $auth.role = 'admin';

DEFINE FIELD about ON profile TYPE option<string> DEFAULT '' PERMISSIONS FULL;
DEFINE FIELD activity_level ON profile TYPE string DEFAULT '' VALUE $value ASSERT $value INSIDE ['Sedentary', 'Lightly active', 'Moderately active', 'Very active', 'Extra active', ''] PERMISSIONS FULL;
DEFINE FIELD createdAt ON profile DEFAULT time::now() VALUE time::now() PERMISSIONS FULL;
DEFINE FIELD dateOfBirth ON profile TYPE option<datetime> DEFAULT NONE PERMISSIONS FULL;
DEFINE FIELD email ON profile TYPE string DEFAULT '' VALUE $value OR '' PERMISSIONS FULL;
DEFINE FIELD gender ON profile TYPE string DEFAULT '' PERMISSIONS FULL;
DEFINE FIELD goals ON profile TYPE array<string> DEFAULT ['', '', ''] PERMISSIONS FULL;
DEFINE FIELD goals[*] ON profile TYPE string DEFAULT '' PERMISSIONS FULL;
DEFINE FIELD image ON profile TYPE string DEFAULT '' VALUE $value OR '' PERMISSIONS FULL;
DEFINE FIELD latest_height_cm ON profile TYPE option<decimal> DEFAULT NONE PERMISSIONS FULL;
DEFINE FIELD latest_weight_kg ON profile TYPE option<decimal> DEFAULT NONE PERMISSIONS FULL;
DEFINE FIELD name ON profile TYPE string DEFAULT '' VALUE $value OR '' PERMISSIONS FULL;
DEFINE FIELD nickname ON profile TYPE string DEFAULT meta::id($auth.id) VALUE $value OR meta::id($auth.id) PERMISSIONS FULL;
DEFINE FIELD updatedAt ON profile DEFAULT time::now() VALUE time::now() PERMISSIONS FULL;
DEFINE FIELD userId ON profile TYPE record<user> DEFAULT $auth.id VALUE $auth.id OR $before.id PERMISSIONS FULL;

DEFINE INDEX nickname ON profile FIELDS nickname UNIQUE;
DEFINE INDEX profileUserId ON profile FIELDS userId UNIQUE;

-- ------------------------------
-- TABLE: step
-- ------------------------------

DEFINE TABLE step TYPE ANY SCHEMAFULL PERMISSIONS FOR select, create, update WHERE userId = $auth.id, FOR delete WHERE userId = $auth.id OR $auth.role = 'admin';

DEFINE FIELD created_at ON step VALUE $before OR time::now() PERMISSIONS FULL;
DEFINE FIELD index ON step TYPE int PERMISSIONS FULL;
DEFINE FIELD level ON step TYPE int PERMISSIONS FULL;
DEFINE FIELD metadata ON step TYPE object PERMISSIONS FULL;
DEFINE FIELD metadata.answer ON step TYPE option<int> PERMISSIONS FULL;
DEFINE FIELD metadata.correctAnswer ON step TYPE option<int> PERMISSIONS FULL;
DEFINE FIELD metadata.options ON step TYPE option<array<string>> PERMISSIONS FULL;
DEFINE FIELD metadata.options[*] ON step TYPE string PERMISSIONS FULL;
DEFINE FIELD metadata.question ON step TYPE option<string> PERMISSIONS FULL;
DEFINE FIELD metadata.text ON step TYPE option<string> PERMISSIONS FULL;
DEFINE FIELD metadata.title ON step TYPE option<string> PERMISSIONS FULL;
DEFINE FIELD metadata.type ON step TYPE string ASSERT $value INSIDE ['step_text', 'step_multiple_choice'] PERMISSIONS FULL;
DEFINE FIELD section ON step TYPE int PERMISSIONS FULL;
DEFINE FIELD unit ON step TYPE int PERMISSIONS FULL;
DEFINE FIELD updated_at ON step VALUE time::now() PERMISSIONS FULL;
DEFINE FIELD userId ON step TYPE record<user> DEFAULT $auth.id VALUE $auth.id PERMISSIONS FULL;

-- ------------------------------
-- TABLE: user
-- ------------------------------

DEFINE TABLE user TYPE ANY SCHEMAFULL PERMISSIONS FOR select, update WHERE id = $auth.id, FOR create WHERE $scope = 'account', FOR delete WHERE id = $auth.id OR $auth.role = 'admin';

DEFINE FIELD createdAt ON user TYPE datetime PERMISSIONS FULL;
DEFINE FIELD pass ON user TYPE string PERMISSIONS FULL;
DEFINE FIELD providerId ON user TYPE string PERMISSIONS FULL;
DEFINE FIELD roles ON user TYPE array<string> DEFAULT ['user'] PERMISSIONS FULL;
DEFINE FIELD roles[*] ON user TYPE string PERMISSIONS FULL;
DEFINE FIELD updatedAt ON user TYPE datetime PERMISSIONS FULL;

DEFINE INDEX userProviderId ON user FIELDS providerId UNIQUE;

-- ------------------------------
-- TABLE: user_overview
-- ------------------------------

DEFINE TABLE user_overview TYPE ANY SCHEMALESS AS SELECT fn::energy(id) AS overview, userId FROM profile PERMISSIONS FOR select, create, update WHERE userId = $auth.id, FOR delete NONE;

-- ------------------------------
-- TABLE: user_overview_2
-- ------------------------------

DEFINE TABLE user_overview_2 TYPE ANY SCHEMALESS AS SELECT VALUE fn::overview(id) FROM profile PERMISSIONS FOR select, create, update WHERE userId = $auth.id, FOR delete NONE;

-- ------------------------------
-- TABLE: weight
-- ------------------------------

DEFINE TABLE weight TYPE ANY SCHEMAFULL PERMISSIONS FOR select, create, update WHERE userId = $auth.id, FOR delete WHERE userId = $auth.id OR $auth.role = 'admin';

DEFINE FIELD createdAt ON weight TYPE datetime DEFAULT time::now() VALUE $value OR time::now() PERMISSIONS FULL;
DEFINE FIELD day ON weight VALUE time::format(updateAt OR time::now(), '%Y-%m-%d') PERMISSIONS FULL;
DEFINE FIELD type ON weight TYPE string DEFAULT 'kg' VALUE $value ASSERT $value INSIDE ['kg', 'g', 'lb'] PERMISSIONS FULL;
DEFINE FIELD updateAt ON weight TYPE datetime DEFAULT time::now() VALUE $value OR time::now() PERMISSIONS FULL;
DEFINE FIELD userId ON weight TYPE record<user> DEFAULT $auth.id VALUE $auth.id PERMISSIONS FULL;
DEFINE FIELD value ON weight TYPE number DEFAULT 0 VALUE $value PERMISSIONS FULL;

DEFINE INDEX day_unique ON weight FIELDS day UNIQUE;
DEFINE INDEX weightUserId ON weight FIELDS userId;

DEFINE EVENT new_latest_weight ON weight WHEN $event = 'CREATE' OR $event = 'UPDATE' THEN {
LET $weight_kg = (IF ($after.type = 'kg') THEN ($after.value) ELSE IF ($after.type = 'g') THEN ($after.value * 0.001f) ELSE ($after.value * 0.45359237f) END);
UPDATE profile SET latest_weight_kg = $weight_kg WHERE userId = $after.userId;
};